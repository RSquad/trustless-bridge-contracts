#include "../libs/errors.lib.fc";

global cell g::validators;
global int g::total_weight;
global int g::epoch_hash;

() load_globals() impure {
  var ds = get_data().begin_parse();
  g::total_weight = ds~load_uint(64);
  g::epoch_hash = ds~load_uint(256);
  g::validators = ds~load_dict();
  ds.end_parse();
}

() store_globals() impure {
  builder data = begin_cell()
  .store_uint(g::total_weight, 64)
  .store_uint(g::epoch_hash, 256)
  .store_dict(g::validators);
  set_data(data.end_cell());
}

() update_validators_dict(cell validators_dict, int main) impure inline {
    int vset_hash = cell_hash(validators_dict);

    ifnot (vset_hash == g::epoch_hash) {
      g::validators = new_dict();
      g::total_weight = 0;
      g::epoch_hash = vset_hash;
      ( int index,
        slice validator,
        int validators::not_end?
      ) = validators_dict.udict_get_nexteq?(16, 0);
      
      while (validators::not_end? & (main > 0)) {
        int header =  validator~load_uint(8);
        int p_magic = validator~load_uint(32);
        throw_unless(err::wrong_validators_config, p_magic == 0x8e81278a);
        int validator_pubkey = validator~load_uint(256);
        g::total_weight = g::total_weight + validator.preload_uint(64);
        slice validator_weight = validator~load_bits(64);
        
        g::validators~udict_set(256, validator_pubkey, validator_weight);

         (index,
          validator,
          validators::not_end?
        ) = validators_dict.udict_get_next?(16, index);
        main -= 1;
      }
    }
}