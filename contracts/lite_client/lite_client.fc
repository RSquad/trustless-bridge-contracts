#include "../libs/stdlib.fc";
#include "../libs/ton_msg.lib.fc";
#include "../libs/errors.lib.fc";
#include "../libs/tvm.lib.fc";
#include "../libs/merkle_proof.lib.fc";
#include "opcodes.fc";
#include "storage.fc";
#include "utils.fc";

(slice, (int, int, slice, cell)) ~load_params(slice in_msg_body) inline_ref {
  ;; block:^ [
  ;;   file_hash:uint256
  ;;   pruned_block:^Cell
  ;; ]
  ;; signatures:^Cell
  slice block_data = in_msg_body~load_ref_slice();
  cell signatures = in_msg_body~load_ref();
  int file_hash = block_data~load_uint(256);
  cell block_proof = block_data~load_ref();
  (int root_hash, slice block_cs) = block_proof.merkle_proof::load_cell();
  return (in_msg_body, (root_hash, file_hash, block_cs, signatures));
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if ( in_msg_body.slice_empty?() ) { ;; accept simple transfer
    return ();
  }
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  if ( flags & 1 ) { ;; ignore all bounced messages
    return ();
  }

  slice sender_address = cs~load_msg_addr();
  int op = in_msg_body~load_op();
  int query_id = in_msg_body~load_query_id();
  load_globals();

  if ( op == op::new_key_block ) {
    ;; new_key_block#11a78ffe 
    ;; query_id:uint64 
    ;; block:^ [
    ;;   file_hash:uint256
    ;;   block_proof:^Cell
    ;; ]
    ;; signatures:^Cell
    ;;  = InternalMsgBody;
    (
      int root_hash,
      int file_hash,
      slice block,
      cell signatures
    ) = in_msg_body~load_params();

    (cell vset, int main) = block.load_vset();
    int block_signed? = check_block_signatures(
      build_signing_message(root_hash, file_hash),
      signatures
    );
    throw_unless(err::unsigned_block, block_signed?);
    update_validators_dict(vset, main);
  
    cell msg = build_message(
      sender_address,
      0,
      false,
      null(),
      begin_cell()
        .store_uint(op::new_key_block::success, 32)
        .store_uint(query_id, 64)
        .store_uint(root_hash, 256)
        .store_slice(in_msg_body)
      .end_cell()
    ).end_cell();
    send_raw_message(msg, send_mode::carry_remaining_value);
    return store_globals();
  }

  if ( op == op::check_block ) {
    ;; check_block#8eaa9d76
    ;; query_id:uint64 
    ;; block:^ [
    ;;   file_hash:uint256
    ;;   pruned_block:^Cell
    ;; ]
    ;; signatures:^Cell
    ;;  = InternalMsgBody;
    (
      int root_hash,
      int file_hash,
      slice block_slice,
      cell signatures
    ) = in_msg_body~load_params();

    throw_if(
      err::is_not_masterchain_block, 
      block_info::load_not_master_flag(block_slice~load_ref_slice())
    );

    ;; if sign is correct, block in current epoch
    int block_signed? = check_block_signatures(
      build_signing_message(root_hash, file_hash), 
      signatures
    );
    throw_unless(err::unsigned_block, block_signed?);
    
    cell msg = build_message(
      sender_address,
      0,
      false,
      null(),
      begin_cell()
        .store_uint(op::check_block::success, 32)
        .store_uint(query_id, 64)
        .store_uint(root_hash, 256)
        .store_slice(in_msg_body)
      .end_cell()
    ).end_cell();
    send_raw_message(msg, send_mode::carry_remaining_value);
    return ();
  }

  throw(err::unknown_operation);
}

cell get_validators() method_id {
  load_globals();
  return g::validators;
}

(cell, int, int) get_storage() method_id {
  load_globals();
  return (g::validators, g::total_weight, g::epoch_hash);
}
