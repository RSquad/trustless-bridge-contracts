#include "../libs/tvm.lib.fc";

() check_is_masterchain_block(cell block_info) impure inline {
    slice block_info_s = block_info.begin_parse();
    int block_type = block_info_s~load_uint(32);
    throw_unless(err::wrong_block_info, block_type == 0x9bc7a987);
    block_info_s~skip_bits(32);
    int not_master = block_info_s~load_uint(1);
    throw_if(err::is_not_masterchain_block, not_master);
}

(slice) build_signing_message(int root_hash, int file_hash) inline {
  return begin_cell()
  .store_uint(0x706e0bc5, 32)
  .store_uint(root_hash, 256)
  .store_uint(file_hash, 256)
  .end_cell()
  .begin_parse();
}

(int) check_block_signatures(slice signing_message, slice signatures_slice) inline {
  cell signatures = signatures_slice~load_dict();

  int signed_weight = 0;

  ( int pubkey,
    slice signature,
    int signatures::not_end?
  ) = signatures.udict_get_next?(256, 0);

  while ( signatures::not_end? ) {
    (slice validator_s, int validator_found?) = g::validators.udict_get?(256, pubkey);

    throw_unless(err::wrong_validators_epoch, validator_found?);
    if (check_data_signature(signing_message, signature, pubkey)) {
      int validator_weight = validator_s~load_uint(64);
      signed_weight = signed_weight + validator_weight;
    }

    ( pubkey,
      signature,
      signatures::not_end?
    ) = signatures.udict_get_next?(256, pubkey);
  }

  return signed_weight * 3 >= 2 * g::total_weight;
}

(slice) load_block_custom(cell block) inline {
    slice cs = block.begin_parse();
    cs~load_ref();
    cs~load_ref();
    cs~load_ref();
    slice extra_s = cs~load_ref_slice();
    int tag = extra_s~load_uint(32);
    throw_unless(err::wrong_block_extra, tag == 0x4a33f6fd);
    extra_s~load_ref();
    extra_s~load_ref();
    extra_s~load_ref();
    slice custom_s = extra_s~load_ref_slice();
    int custom_magic = custom_s~load_uint(16);
    throw_unless(err::unknown_operation, custom_magic == 0xcca5);
    int is_keyblock = custom_s~load_uint(1);
    throw_unless(err::is_not_keyblock, is_keyblock);
    return custom_s;
}

(cell, int) load_validators_list(slice custom_s) inline {
    custom_s~load_ref();
    custom_s~load_ref();
    custom_s~load_ref();
    cell config = custom_s~load_dict();
    (cell config_34, int flag?) = config.udict_get_ref?(32, 34);
    throw_unless(err::is_not_keyblock, flag?);
    slice config_34_s = config_34.begin_parse();
    ;; valsType, utimeSince, utimeUntil
    config_34_s~skip_bits(72);
    int total = config_34_s~load_uint(16);
    int main = config_34_s~load_uint(16);
    throw_if(err::wrong_validators_config, total < main);
    throw_if(err::wrong_validators_config, main < 1);
    config_34_s~skip_bits(64); ;; total_weight
    return (config_34_s~load_dict(), main);
}